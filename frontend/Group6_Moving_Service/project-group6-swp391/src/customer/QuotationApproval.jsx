import React, { useEffect, useState } from "react";
import {
  Card,
  Button,
  Spin,
  List,
  Modal,
  Typography,
  Space,
  Empty,
  Checkbox,
  message,
} from "antd";
import { CheckCircleOutlined, CloseCircleOutlined } from "@ant-design/icons";
// Gi·∫£ ƒë·ªãnh b·∫°n c√≥ axiosInstance trong file api.js ho·∫∑c service/axiosInstance
import api from "../service/axiosInstance"; 
import dayjs from "dayjs";

const { Title, Text } = Typography;

const QuotationApproval = () => {
  const [quotations, setQuotations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedQuotation, setSelectedQuotation] = useState(null);
  const [agree, setAgree] = useState(false);
  const [approving, setApproving] = useState(false);
  const [rejecting, setRejecting] = useState(false);
  const [showRejectConfirm, setShowRejectConfirm] = useState(false);

  // H√†m t·∫£i d·ªØ li·ªáu b√°o gi√°
  const fetchQuotations = async () => {
    setLoading(true);
    try {
      // S·ª≠ d·ª•ng api.get() thay v√¨ axios.get()
      const res = await api.get("/quotations/pending/me");
      // D·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω th√™m n·∫øu c·∫ßn
      setQuotations(res.data.result || res.data || []); 
    } catch (err) {
      // S·ª≠ d·ª•ng message c·ªßa antd thay v√¨ alert()
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°o gi√°. Vui l√≤ng th·ª≠ l·∫°i!");
      setQuotations([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchQuotations();
  }, []);

  // H√†m ch·∫•p thu·∫≠n b√°o gi√°
  const handleApprove = async (quotationId) => {
    if (!agree) {
      message.warning("Vui l√≤ng ƒë·ªìng √Ω v·ªõi b√°o gi√° tr∆∞·ªõc khi x√°c nh·∫≠n!");
      return;
    }

    setApproving(true);
    try {
      await api.put(`/quotations/approve/${quotationId}`);
      message.success("B·∫°n ƒë√£ ch·∫•p thu·∫≠n b√°o gi√° th√†nh c√¥ng! H·ª£p ƒë·ªìng s·∫Ω ƒë∆∞·ª£c t·∫°o.");
      fetchQuotations(); // load l·∫°i danh s√°ch m·ªõi

      // C·∫≠p nh·∫≠t state b·∫±ng c√°ch l·ªçc b·ªè b√°o gi√° v·ª´a duy·ªát
      setQuotations((prev) => prev.filter((q) => q.id !== quotationId));
      setSelectedQuotation(null);
      setAgree(false);
    } catch (err) {
      // X·ª≠ l√Ω l·ªói t·ª´ backend/API
      message.error("X√°c nh·∫≠n th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setApproving(false);
    }
  };

  // H√†m t·ª´ ch·ªëi b√°o gi√°
  const handleReject = async (quotationId) => {
    setRejecting(true);
    try {
      await api.put(`/quotations/reject/${quotationId}`);
      message.info("B·∫°n ƒë√£ t·ª´ ch·ªëi b√°o gi√° n√†y.");
      // C·∫≠p nh·∫≠t state b·∫±ng c√°ch l·ªçc b·ªè b√°o gi√° v·ª´a t·ª´ ch·ªëi
      setQuotations((prev) => prev.filter((q) => q.id !== quotationId));
      setSelectedQuotation(null);
      setShowRejectConfirm(false);
    } catch (err) {
      message.error("Kh√¥ng th·ªÉ t·ª´ ch·ªëi b√°o gi√°, vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setRejecting(false);
    }
  };

  // Hi·ªÉn th·ªã loading
  if (loading) {
    return (
      <div
        style={{
          textAlign: "center",
          padding: "50px",
          minHeight: "300px",
        }}
      >
        <Spin size="large" tip="ƒêang t·∫£i b√°o gi√° ch·ªù duy·ªát..." />
      </div>
    );
  }

  // --- JSX cho n·ªôi dung ch√≠nh ---

  return (
    <div style={{ padding: "0px 10px" }}>
      <Title level={3} style={{ marginBottom: 24 }}>
        üí∞ B√°o gi√° ch·ªù duy·ªát
      </Title>

      {quotations.length === 0 ? (
        <Empty
          description={
            <Text type="secondary">
              Kh√¥ng c√≥ b√°o gi√° n√†o ƒëang ch·ªù b·∫°n ch·∫•p thu·∫≠n.
            </Text>
          }
          style={{ padding: "50px 0" }}
        />
      ) : (
        <List
          grid={{ gutter: 16, xs: 1, sm: 2, md: 2, lg: 3, xl: 4 }}
          dataSource={quotations}
          renderItem={(quotation) => (
            <List.Item>
              <Card
                title={quotation.companyName || "C√¥ng ty chuy·ªÉn nh√†"}
                hoverable
                extra={
                  <Text strong type="danger">
                    {quotation.totalPrice
                      ? quotation.totalPrice.toLocaleString("vi-VN") + " ‚Ç´"
                      : "Ch∆∞a c√≥ gi√°"}
                  </Text>
                }
              >
                <Space direction="vertical" style={{ width: "100%" }}>
                  <Text>
                    Ng√†y kh·∫£o s√°t:{" "}
                    {quotation.surveyDate
                      ? dayjs(quotation.surveyDate).format("DD/MM/YYYY")
                      : "Kh√¥ng r√µ"}
                  </Text>
                  <Text ellipsis>
                    ƒê·ªãa ch·ªâ: {quotation.addressFrom || "?"} ‚Üí{" "}
                    {quotation.addressTo || "?"}
                  </Text>
                  <Button
                    type="primary"
                    block
                    danger
                    onClick={() => {
                      setSelectedQuotation(quotation);
                      setAgree(false);
                      setShowRejectConfirm(false);
                    }}
                  >
                    Xem chi ti·∫øt & Ph√™ duy·ªát
                  </Button>
                </Space>
              </Card>
            </List.Item>
          )}
        />
      )}

      {/* Modal chi ti·∫øt & ph√™ duy·ªát */}
      <Modal
        title={
          <Title level={4} style={{ margin: 0 }}>
            Chi ti·∫øt b√°o gi√° t·ª´ {selectedQuotation?.companyName}
          </Title>
        }
        open={!!selectedQuotation}
        onCancel={() => {
          setSelectedQuotation(null);
          setShowRejectConfirm(false); // ƒê√≥ng x√°c nh·∫≠n t·ª´ ch·ªëi khi ƒë√≥ng modal
        }}
        footer={[
          // N√∫t Ch·∫•p thu·∫≠n
          <Button
            key="approve"
            type="primary"
            icon={<CheckCircleOutlined />}
            loading={approving}
            disabled={!agree || approving || rejecting}
            onClick={() => handleApprove(selectedQuotation.quotationId)}
            style={{ backgroundColor: "darkred", borderColor: "darkred" }}
          >
            {approving ? "ƒêang x·ª≠ l√Ω..." : "Ch·∫•p thu·∫≠n"}
          </Button>,

          // N√∫t T·ª´ ch·ªëi
          !showRejectConfirm ? (
            <Button
              key="reject-confirm-btn"
              icon={<CloseCircleOutlined />}
              onClick={() => setShowRejectConfirm(true)}
              disabled={approving || rejecting}
            >
              T·ª´ ch·ªëi b√°o gi√°
            </Button>
          ) : (
            <Space key="reject-group">
              <Text type="danger">X√°c nh·∫≠n t·ª´ ch·ªëi?</Text>
              <Button
                key="reject-no"
                onClick={() => setShowRejectConfirm(false)}
                disabled={rejecting}
              >
                H·ªßy
              </Button>
              <Button
                key="reject-yes"
                danger
                loading={rejecting}
                onClick={() => handleReject(selectedQuotation.quotationId)}
              >
                {rejecting ? "ƒêang x·ª≠ l√Ω..." : "T·ª´ ch·ªëi"}
              </Button>
            </Space>
          ),
        ]}
        width={800}
      >
        {selectedQuotation && (
          <Space direction="vertical" size="large" style={{ width: "100%" }}>
            <Card type="inner" title="Th√¥ng tin chung">
              <div style={{ display: "flex", flexWrap: "wrap", gap: "20px" }}>
                <Text style={{ flexBasis: "45%" }}>
                  <strong>Kh√°ch h√†ng:</strong> {selectedQuotation.username}
                </Text>
                <Text style={{ flexBasis: "45%" }}>
                  <strong>C√¥ng ty:</strong> {selectedQuotation.companyName}
                </Text>
                <Text style={{ flexBasis: "45%" }}>
                  <strong>Ng√†y kh·∫£o s√°t:</strong>{" "}
                  {selectedQuotation.surveyDate
                    ? dayjs(selectedQuotation.surveyDate).format("DD/MM/YYYY")
                    : "-"}
                </Text>
                <Text style={{ flexBasis: "45%" }}>
                  <strong>T·ªïng gi√° tr·ªã:</strong>{" "}
                  <Text strong type="danger">
                    {selectedQuotation.totalPrice?.toLocaleString("vi-VN") + " ‚Ç´"}
                  </Text>
                </Text>
                <Text style={{ flexBasis: "100%" }}>
                  <strong>ƒê·ªãa ch·ªâ:</strong> {selectedQuotation.addressFrom} ‚Üí{" "}
                  {selectedQuotation.addressTo}
                </Text>
                <Text style={{ flexBasis: "100%" }}>
                  <strong>D·ªãch v·ª• k√®m theo:</strong>{" "}
                  {selectedQuotation.listService || "Kh√¥ng c√≥"}
                </Text>
              </div>
            </Card>

            <Card title="Chi ti·∫øt d·ªãch v·ª•">
              <List
                itemLayout="horizontal"
                dataSource={selectedQuotation.services || []}
                renderItem={(item, index) => (
                  <List.Item
                    actions={[
                      <Text strong key="subtotal">
                        {item.subtotal?.toLocaleString("vi-VN")} ‚Ç´
                      </Text>,
                    ]}
                  >
                    <List.Item.Meta
                      title={item.serviceName}
                      description={`ƒê∆°n v·ªã: ${item.priceType} | S·ªë l∆∞·ª£ng: ${item.quantity}`}
                    />
                  </List.Item>
                )}
              />
            </Card>

            <div style={{ padding: "10px 0" }}>
              <Checkbox
                checked={agree}
                onChange={(e) => setAgree(e.target.checked)}
              >
                T√¥i **ƒë·ªìng √Ω** v·ªõi to√†n b·ªô n·ªôi dung v√† chi ph√≠ trong b√°o gi√° n√†y.
              </Checkbox>
              <Text type="secondary" style={{ display: "block", marginTop: 5 }}>
                *Vi·ªác ch·∫•p thu·∫≠n s·∫Ω chuy·ªÉn b√°o gi√° th√†nh H·ª£p ƒë·ªìng ch·ªù k√Ω k·∫øt.
              </Text>
            </div>
          </Space>
        )}
      </Modal>
    </div>
  );
};

export default QuotationApproval;