import React, { useState } from "react";
import {
    Card,
    Row,
    Col,
    Button,
    Select,
    InputNumber,
    message, // S·ª≠ d·ª•ng message c·ªßa Antd
    Tag,
    Typography,
    Divider,
    Space,
} from "antd";
import { DeleteOutlined, MinusOutlined, PlusOutlined, InfoCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';
// Gi·∫£ ƒë·ªãnh axios ·ªü ƒë√¢y l√† axiosInstance ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
import axiosInstance from "../service/axiosInstance"; 
import dayjs from "dayjs";

const { Text, Title } = Typography;

export const QuotationList = ({
    quotations,
    fetchQuotations,
    selectedQuotation,
    setSelectedQuotation,
}) => {

    // Thay th·∫ø notification t·ª± t·∫°o b·∫±ng message Antd
    const showMessage = (type, content) => {
        message[type](content);
    };

    const statusColors = {
        APPROVED: "success", // green
        SENT: "processing", // blue
        DRAFT: "warning", // orange
        REJECTED: "error",
    };

    const statusText = {
        APPROVED: "ƒê√£ ch·∫•p nh·∫≠n",
        PENDING: "ƒêang ch·ªù", // S·ª≠a t·ª´ 'ƒê√£ g·ª≠i' th√†nh 'ƒêang ch·ªù' cho tr·∫°ng th√°i PENDING
        SENT: "ƒê√£ g·ª≠i",
        DRAFT: "B·∫£n nh√°p",
        REJECTED: "ƒê√£ t·ª´ ch·ªëi",
        CREATED :"ƒê√£ ƒë∆∞·ª£c qu·∫£n l√≠ duy·ªát v√† t·∫°o h·ª£p ƒë·ªìng"
    };

    // üß© Hi·ªÉn th·ªã chi ti·∫øt b√°o gi√°
    const renderQuotationDetails = (record) => {
        if (!record) {
            return (
                <div
                    style={{
                        height: "75vh",
                        display: "flex",
                        flexDirection: 'column',
                        alignItems: "center",
                        justifyContent: "center",
                        color: "#888",
                        fontStyle: "italic",
                        background: "#fafafa",
                        borderRadius: 12, // TƒÉng bo tr√≤n
                        border: "2px dashed #e0e0e0", // Vi·ªÅn dash hi·ªán ƒë·∫°i
                        padding: 24,
                    }}
                >
                    <InfoCircleOutlined style={{ fontSize: 40, marginBottom: 16, color: '#999' }} />
                    <Title level={4} style={{ color: '#999' }}>Ch∆∞a c√≥ b√°o gi√° ƒë∆∞·ª£c ch·ªçn</Title>
                    <Text type="secondary">Vui l√≤ng ch·ªçn m·ªôt b√°o gi√° t·ª´ danh s√°ch b√™n tr√°i ƒë·ªÉ xem chi ti·∫øt.</Text>
                </div>
            );
        }

        const added = record.services || [];

        const handleUpdateQuantity = async (serviceId, newQuantity) => {
            if (newQuantity < 1) return;
            try {
                // S·ª≠a l·∫°i API call ƒë·ªÉ s·ª≠ d·ª•ng axiosInstance
                await axiosInstance.put(
                    `/quotation-services/${serviceId}`,
                    null, // Body r·ªóng ho·∫∑c null cho PUT/DELETE n·∫øu API ch·ªâ d√πng query/path
                    { params: { quantity: newQuantity } } // Truy·ªÅn s·ªë l∆∞·ª£ng qua params
                );
                showMessage("success", "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng!");
                fetchQuotations?.();
            } catch (error) {
                console.error("L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
                showMessage("error", "C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
            }
        };

        const handleDeleteService = async (serviceId) => {
            try {
                // S·ª≠a l·∫°i API call ƒë·ªÉ s·ª≠ d·ª•ng axiosInstance
                await axiosInstance.delete(
                    `/quotation-services/${serviceId}`
                );
                showMessage("success", "X√≥a d·ªãch v·ª• th√†nh c√¥ng!");
                fetchQuotations?.();
            } catch (error) {
                console.error("L·ªói x√≥a d·ªãch v·ª•:", error);
                showMessage("error", "X√≥a th·∫•t b·∫°i!");
            }
        };

        return (
            <Card
                style={{ borderRadius: 12, boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)', minHeight: '75vh' }}
                title={
                    <Space>
                        <Text strong>B√°o gi√° #{record.quotationId}</Text>
                        <Tag color={statusColors[record.status]} style={{ fontWeight: 'bold' }}>
                            {statusText[record.status] || record.status}
                        </Tag>
                    </Space>
                }
                extra={
                     // Th√™m n√∫t h√†nh ƒë·ªông (v√≠ d·ª•: Ch·ªânh s·ª≠a/Duy·ªát)
                    <Button type="primary" size="small" style={{ borderRadius: 6 }}>
                        Duy·ªát b√°o gi√°
                    </Button>
                }
            >
                <Row gutter={[16, 16]}>
                    <Col span={12}>
                        <Title level={5} style={{ color: '#1890ff' }}>Th√¥ng tin kh√°ch h√†ng</Title>
                        <Text><strong>T√™n:</strong> {record.username}</Text><br />
                        <Text><strong>ƒêi·ªán tho·∫°i:</strong> {record.phone || "N/A"}</Text><br />
                        <Text><strong>Ng√†y t·∫°o:</strong> {dayjs(record.createdAt).format("DD/MM/YYYY HH:mm")}</Text>
                    </Col>
                    <Col span={12}>
                        <Title level={5} style={{ color: '#1890ff' }}>ƒê·ªãa ƒëi·ªÉm & Th·ªùi gian</Title>
                        <Text><strong>T·ª´:</strong> {record.addressFrom || "N/A"}</Text><br />
                        <Text><strong>ƒê·∫øn:</strong> {record.addressTo || "N/A"}</Text><br />
                        <Text><strong>Ng√†y chuy·ªÉn:</strong> {dayjs(record.surveyDate).format("DD/MM/YYYY")}</Text>
                    </Col>
                </Row>
                
                <Divider orientation="left" style={{ margin: '20px 0' }}>
                    <Title level={5} style={{ margin: 0 }}>Chi ti·∫øt D·ªãch v·ª•</Title>
                </Divider>

                {/* D·ªãch v·ª• ƒë√£ th√™m */}
                <div style={{ maxHeight: '40vh', overflowY: 'auto', paddingRight: 8 }}>
                    {added.length > 0 ? (
                        added.map((s) => (
                            <Card
                                key={s?.id}
                                size="small"
                                style={{
                                    marginBottom: 10,
                                    borderRadius: 8,
                                    // T·∫°o hi·ªáu ·ª©ng ƒë·ªï b√≥ng cho t·ª´ng d·ªãch v·ª•
                                    boxShadow: '0 1px 4px rgba(0,0,0,0.05)',
                                    transition: 'all 0.2s',
                                    backgroundColor: '#f9f9f9'
                                }}
                            >
                                <Row justify="space-between" align="middle">
                                    <Col span={12}>
                                        <Text strong style={{ color: '#333' }}>{s?.serviceName}</Text><br />
                                        <Text type="secondary" style={{ fontSize: 12 }}>({s?.priceType})</Text>
                                    </Col>
                                    <Col span={6} style={{ textAlign: 'center' }}>
                                        <Text>
                                            {s?.amount?.toLocaleString()} √ó {s.quantity}
                                        </Text>
                                    </Col>
                                    <Col span={6} style={{ textAlign: 'right' }}>
                                        <Space>
                                            <Button
                                                icon={<MinusOutlined />}
                                                size="small"
                                                onClick={() => handleUpdateQuantity(s.id, s.quantity - 1)}
                                                disabled={s.quantity <= 1}
                                            />
                                            <InputNumber
                                                min={1}
                                                size="small"
                                                value={s.quantity}
                                                onChange={(value) => handleUpdateQuantity(s.id, value || 1)}
                                                style={{ width: 50, textAlign: 'center' }}
                                            />
                                            <Button
                                                icon={<PlusOutlined />}
                                                size="small"
                                                onClick={() => handleUpdateQuantity(s.id, s.quantity + 1)}
                                            />
                                            <Button
                                                danger
                                                type="text" // D√πng type="text" ƒë·ªÉ n√∫t x√≥a g·ªçn g√†ng h∆°n
                                                size="small"
                                                icon={<DeleteOutlined />}
                                                onClick={() => handleDeleteService(s.id)}
                                                title="X√≥a d·ªãch v·ª•"
                                            />
                                        </Space>
                                    </Col>
                                </Row>
                                <div style={{ textAlign: 'right', marginTop: 8, borderTop: '1px dashed #eee', paddingTop: 4 }}>
                                    <Text strong type="success">
                                        Th√†nh ti·ªÅn: {s.subtotal?.toLocaleString()} ƒë
                                    </Text>
                                </div>
                            </Card>
                        ))
                    ) : (
                        <p style={{ color: "#999", fontStyle: "italic", textAlign: 'center' }}>
                            Ch∆∞a c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c th√™m v√†o b√°o gi√° n√†y.
                        </p>
                    )}
                </div>

                {/* T·ªïng c·ªông */}
                <div
                    style={{
                        background: "#e6f7ff", // M√†u n·ªÅn nh·∫π nh√†ng
                        padding: "16px",
                        marginTop: 20,
                        borderRadius: 8,
                        textAlign: "right",
                        border: '1px solid #91d5ff'
                    }}
                >
                    <Title level={4} style={{ margin: 0 }}>
                        <Text strong>T·ªîNG C·ªòNG: </Text>
                        <Text strong style={{ color: "#1890ff" }}>
                            {record.totalPrice?.toLocaleString() || 0} ƒë
                        </Text>
                    </Title>
                </div>
            </Card>
        );
    };

    // üß± Giao di·ªán ch√≠nh ‚Äî 2 c·ªôt
    return (
        <Row gutter={24}>
            {/* C·ªôt tr√°i: danh s√°ch b√°o gi√° */}
            <Col span={10}>
                <Title level={4} style={{ marginBottom: 16, borderLeft: '4px solid #1890ff', paddingLeft: 12 }}>
                    Danh S√°ch B√°o Gi√° ({quotations.length})
                </Title>
                <div
                    style={{
                        display: "flex",
                        flexDirection: "column",
                        gap: 12,
                        maxHeight: "75vh",
                        overflowY: "auto",
                        paddingRight: 8 // Th√™m padding ƒë·ªÉ kh√¥ng che scrollbar
                    }}
                >
                    {quotations.map((q) => (
                        <Card
                            key={q.quotationId}
                            hoverable
                            onClick={() => setSelectedQuotation(q)}
                            style={{
                                borderRadius: 10,
                                // ƒê·ªï b√≥ng nh·∫π khi ch∆∞a ch·ªçn, ƒë·ªï b√≥ng m·∫°nh h∆°n khi ch·ªçn
                                boxShadow: selectedQuotation?.quotationId === q.quotationId
                                    ? "0 4px 10px rgba(24, 144, 255, 0.2)"
                                    : "0 2px 5px rgba(0, 0, 0, 0.05)",
                                border:
                                    selectedQuotation?.quotationId === q.quotationId
                                        ? "2px solid #1890ff"
                                        : "1px solid #ddd",
                                background:
                                    selectedQuotation?.quotationId === q.quotationId
                                        ? "#e6f7ff" // N·ªÅn xanh nh·∫°t khi ƒë∆∞·ª£c ch·ªçn
                                        : "white",
                                transition: "all 0.2s ease",
                            }}
                        >
                            <Space direction="vertical" style={{ width: '100%' }}>
                                <Row justify="space-between" align="middle" style={{ width: '100%' }}>
                                    <Text strong style={{ color: '#1890ff' }}>#{q.quotationId}</Text>
                                    <Tag color={statusColors[q.status]} style={{ fontWeight: 'bold' }}>
                                        {statusText[q.status] || q.status}
                                    </Tag>
                                </Row>
                                <Text>{q.username} ({q.phone})</Text>
                                <Text type="secondary" style={{ fontSize: 12 }}>
                                    <CheckCircleOutlined style={{ marginRight: 4 }} />
                                    Ng√†y t·∫°o: {dayjs(q.createdAt).format("DD/MM/YYYY")}
                                </Text>
                                <Divider style={{ margin: '8px 0' }} />
                                <div style={{ textAlign: "right" }}>
                                    <Text type="success" style={{ fontSize: 16, fontWeight: 'bold' }}>
                                        T·ªïng: {q.totalPrice?.toLocaleString() || 0} ƒë
                                    </Text>
                                </div>
                            </Space>
                        </Card>
                    ))}
                    {quotations.length === 0 && (
                        <Card style={{ textAlign: 'center', color: '#999', border: '1px dashed #ccc' }}>
                            Kh√¥ng c√≥ b√°o gi√° n√†o.
                        </Card>
                    )}
                </div>
            </Col>

            {/* C·ªôt ph·∫£i: chi ti·∫øt b√°o gi√° */}
            <Col span={14}>
                {renderQuotationDetails(selectedQuotation)}
            </Col>
        </Row>
    );
};