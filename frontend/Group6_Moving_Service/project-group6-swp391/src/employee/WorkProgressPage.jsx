import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  Table,
  Card,
  Button,
  Input,
  Tag,
  Space,
  Typography,
  Spin,
  Alert,
  message,
  Modal,
  Form,
  Upload,
  Image,
} from "antd";
import {
  CheckCircleOutlined,
  SyncOutlined,
  ClockCircleOutlined,
  ReloadOutlined,
  TrophyOutlined,
  PlusOutlined,
  EyeOutlined,
  EditOutlined,
  WarningOutlined,
  UploadOutlined,
} from "@ant-design/icons";

import workProgressApi from "../service/workprogress";
import damageApi from "../service/damage";
import "./style/WorkProgressPage.css";

const { Title } = Typography;

// ===================== Helper function ƒë·ªÉ format ng√†y =====================
const formatDate = (dateString) => {
  if (!dateString) return "‚Äî";
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

const WorkProgressPage = () => {
  const [progressList, setProgressList] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isDamageModalVisible, setIsDamageModalVisible] = useState(false);
  const [isViewDamageVisible, setIsViewDamageVisible] = useState(false);
  const [isEditDamageVisible, setIsEditDamageVisible] = useState(false);
  const [selectedContractId, setSelectedContractId] = useState(null);
  const [editingDamageId, setEditingDamageId] = useState(null);
  const [damageList, setDamageList] = useState([]);
  const [damageForm] = Form.useForm();

  // üöÄ L·∫•y danh s√°ch ti·∫øn ƒë·ªô c·ªßa nh√¢n vi√™n
  const fetchProgressList = async () => {
    try {
      setLoading(true);
      const res = await workProgressApi.getMyList();
      setProgressList(res.data);
    } catch (err) {
      console.error(err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¥ng vi·ªác.");
      message.error("L·ªói t·∫£i ti·∫øn ƒë·ªô, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProgressList();
  }, []);

  // üì¶ L·∫•y danh s√°ch damage theo h·ª£p ƒë·ªìng
  const fetchDamagesByContract = async (contractId) => {
    try {
      const res = await damageApi.getByContract(contractId);
      setDamageList(res.data || []);
    } catch (err) {
      console.error("Error fetching damages:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch thi·ªát h·∫°i");
    }
  };

  // ‚ûï T·∫°o thi·ªát h·∫°i m·ªõi
  const openDamageModal = (contractId) => {
    setSelectedContractId(contractId);
    setIsDamageModalVisible(true);
  };

  // ‚úÖ Nh√¢n vi√™n t·∫°o thi·ªát h·∫°i (b∆∞·ªõc 1)
  const handleCreateDamage = async (values) => {
    try {
      const payload = {
        contractId: selectedContractId,
        cause: values.cause,
        cost: parseFloat(values.cost),
        imageUrl: values.imageUrl || null,
        status: "pending_customer", // ‚úÖ B·∫Øt ƒë·∫ßu quy tr√¨nh
        customerFeedback: null,
        managerFeedback: null,
      };

      await damageApi.create(payload);
      message.success("‚úÖ T·∫°o thi·ªát h·∫°i th√†nh c√¥ng, ch·ªù kh√°ch h√†ng ph·∫£n h·ªìi!");
      setIsDamageModalVisible(false);
      damageForm.resetFields();
      fetchDamagesByContract(selectedContractId);
    } catch (err) {
      console.error("Error creating damage:", err);
      message.error("Kh√¥ng th·ªÉ t·∫°o thi·ªát h·∫°i");
    }
  };

  // üëÅÔ∏è Xem danh s√°ch thi·ªát h·∫°i theo h·ª£p ƒë·ªìng
  const openViewDamageModal = async (contractId) => {
    setSelectedContractId(contractId);
    await fetchDamagesByContract(contractId);
    setIsViewDamageVisible(true);
  };

  // ‚úèÔ∏è M·ªü modal ch·ªânh s·ª≠a damage khi b·ªã t·ª´ ch·ªëi
  const openEditDamageModal = (damage) => {
    setEditingDamageId(damage.damageId);
    damageForm.setFieldsValue({
      cause: damage.cause,
      cost: damage.cost,
      imageUrl: damage.imageUrl,
    });
    setIsEditDamageVisible(true);
  };

  // ‚úÖ G·ª≠i c·∫≠p nh·∫≠t l·∫°i thi·ªát h·∫°i sau khi b·ªã t·ª´ ch·ªëi
  const handleEditDamage = async (values) => {
    try {
      await damageApi.update(editingDamageId, {
        ...values,
        status: "pending_customer",
        customerFeedback: null,
        managerFeedback: null,
      });
      message.success("ƒê√£ c·∫≠p nh·∫≠t v√† g·ª≠i l·∫°i thi·ªát h·∫°i cho kh√°ch h√†ng duy·ªát!");
      setIsEditDamageVisible(false);
      fetchDamagesByContract(selectedContractId);
    } catch (err) {
      message.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t thi·ªát h·∫°i");
    }
  };

  // üé® Hi·ªÉn th·ªã tr·∫°ng th√°i ti·∫øn ƒë·ªô c√¥ng vi·ªác
  const renderStatus = (status) => {
    const statusMap = {
      pending: { color: "orange", icon: <ClockCircleOutlined />, text: "ƒêang ch·ªù" },
      in_progress: { color: "blue", icon: <SyncOutlined spin />, text: "ƒêang th·ª±c hi·ªán" },
      completed: { color: "green", icon: <CheckCircleOutlined />, text: "Ho√†n th√†nh" },
    };
    const s = statusMap[status] || statusMap.pending;
    return (
      <Tag icon={s.icon} color={s.color}>
        {s.text}
      </Tag>
    );
  };

  // üßæ C·ªôt hi·ªÉn th·ªã b·∫£ng ti·∫øn ƒë·ªô
  const columns = [
    {
      title: "#",
      key: "index",
      width: 60,
      render: (_, __, index) => index + 1,
    },
    {
      title: "Kh√°ch H√†ng",
      dataIndex: "customerName",
      key: "customerName",
      width: 150,
    },
    {
      title: "D·ªãch V·ª•",
      dataIndex: "serviceName",
      key: "serviceName",
      width: 150,
    },
    {
      title: "Ng√†y B·∫Øt ƒê·∫ßu",
      dataIndex: "startDate",
      key: "startDate",
      width: 120,
      render: (date) => formatDate(date),
    },
    {
      title: "Ng√†y K·∫øt Th√∫c",
      dataIndex: "endDate",
      key: "endDate",
      width: 120,
      render: (date) => formatDate(date),
    },
    {
      title: "Nh√¢n Vi√™n",
      dataIndex: "employeeName",
      key: "employeeName",
      width: 130,
    },
    {
      title: "C√¥ng Vi·ªác",
      dataIndex: "taskDescription",
      key: "taskDescription",
      width: 200,
    },
    {
      title: "Tr·∫°ng Th√°i",
      dataIndex: "progressStatus",
      key: "progressStatus",
      width: 150,
      render: (status) => renderStatus(status),
    },
    {
      title: "H√†nh ƒê·ªông",
      key: "action",
      width: 250,
      render: (_, record) => (
        <Space>
          <Button
            type="dashed"
            icon={<PlusOutlined />}
            onClick={() => openDamageModal(record.contractId)}
          >
            T·∫°o Thi·ªát H·∫°i
          </Button>
          <Button
            type="primary"
            icon={<EyeOutlined />}
            onClick={() => openViewDamageModal(record.contractId)}
          >
            Xem Thi·ªát H·∫°i
          </Button>
        </Space>
      ),
    },
  ];

  if (loading)
    return (
      <div className="loading-container">
        <Spin size="large" tip="‚è≥ ƒêang t·∫£i d·ªØ li·ªáu..." />
      </div>
    );

  if (error)
    return (
      <Alert
        message="L·ªói"
        description={error}
        type="error"
        showIcon
        style={{ margin: 24 }}
      />
    );

  return (
    <div className="work-progress-page">
      <div className="page-header">
        <Title level={2}>
          <TrophyOutlined /> Ti·∫øn ƒê·ªô C√¥ng Vi·ªác
        </Title>
        <Button
          type="primary"
          icon={<ReloadOutlined />}
          onClick={fetchProgressList}
          loading={loading}
        >
          L√†m M·ªõi
        </Button>
      </div>

      {/* B·∫£ng ti·∫øn ƒë·ªô */}
      <Card className="table-card">
        <Title level={4}>Chi Ti·∫øt C√¥ng Vi·ªác</Title>
        <Table
          dataSource={progressList}
          columns={columns}
          rowKey="progressId"
          scroll={{ x: 1200 }}
        />
      </Card>

      {/* ‚ûï Modal: T·∫°o thi·ªát h·∫°i */}
      <Modal
        title="T·∫°o B√°o C√°o Thi·ªát H·∫°i"
        open={isDamageModalVisible}
        onCancel={() => setIsDamageModalVisible(false)}
        onOk={() => damageForm.submit()}
        okText="G·ª≠i"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={damageForm} onFinish={handleCreateDamage}>
          <Form.Item name="imageUrl" hidden>
            <Input type="hidden" />
          </Form.Item>

          <Form.Item
            label="Nguy√™n Nh√¢n"
            name="cause"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p nguy√™n nh√¢n!" }]}
          >
            <Input.TextArea rows={3} placeholder="Mi√™u t·∫£ thi·ªát h·∫°i..." />
          </Form.Item>

          <Form.Item
            label="Chi Ph√≠ ƒê·ªÅn B√π (‚Ç´)"
            name="cost"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p chi ph√≠!" }]}
          >
            <Input type="number" />
          </Form.Item>

          <Form.Item label="H√¨nh ·∫¢nh Minh Ch·ª©ng">
            <Upload
              name="file"
              listType="picture-card"
              showUploadList={false}
              beforeUpload={() => false}
              onChange={async (info) => {
                const file = info.file;
                if (!file) return;

                const formData = new FormData();
                formData.append("file", file);

                try {
                  const res = await axios.post(
                    "http://localhost:8080/api/damages/upload",
                    formData,
                    {
                      headers: {
                        "Content-Type": "multipart/form-data",
                        Authorization: `Bearer ${localStorage.getItem("token")}`,
                      },
                    }
                  );

                  damageForm.setFieldValue("imageUrl", res.data);
                  message.success("·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!");
                } catch (err) {
                  console.error("Error uploading:", err);
                  message.error("Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n!");
                }
              }}
            >
              <div>
                <UploadOutlined />
                <div style={{ marginTop: 8 }}>T·∫£i ·∫¢nh</div>
              </div>
            </Upload>

            {damageForm.getFieldValue("imageUrl") && (
              <div style={{ marginTop: 10 }}>
                <Image
                  src={damageForm.getFieldValue("imageUrl")}
                  alt="Preview"
                  width="100%"
                  height={200}
                  style={{ objectFit: "contain", borderRadius: 8 }}
                />
              </div>
            )}
          </Form.Item>
        </Form>
      </Modal>

      {/* üëÅÔ∏è Modal: Xem Thi·ªát H·∫°i */}
      <Modal
        title="Danh S√°ch Thi·ªát H·∫°i"
        open={isViewDamageVisible}
        onCancel={() => setIsViewDamageVisible(false)}
        footer={null}
        width={700}
      >
        {damageList.length === 0 ? (
          <Alert message="Kh√¥ng c√≥ thi·ªát h·∫°i n√†o cho h·ª£p ƒë·ªìng n√†y" type="info" showIcon />
        ) : (
          damageList.map((dmg) => (
            <Card
              key={dmg.damageId}
              title={
                <>
                  <WarningOutlined /> {dmg.cause}
                </>
              }
              style={{ marginBottom: "12px" }}
              extra={
                dmg.status === "rejected" && (
                  <Button
                    type="primary"
                    icon={<EditOutlined />}
                    onClick={() => openEditDamageModal(dmg)}
                  >
                    Ch·ªânh s·ª≠a
                  </Button>
                )
              }
            >
              <p>üí∞ <b>Chi Ph√≠:</b> {dmg.cost?.toLocaleString("vi-VN")} ‚Ç´</p>
              <p>üë∑ <b>Nh√¢n Vi√™n:</b> {dmg.employeeName}</p>
              <p>
                üè∑Ô∏è <b>Tr·∫°ng Th√°i:</b>{" "}
                <Tag
                  color={
                    dmg.status === "pending_customer"
                      ? "gold"
                      : dmg.status === "pending_manager"
                        ? "blue"
                        : dmg.status === "approved"
                          ? "green"
                          : dmg.status === "rejected"
                            ? "red"
                            : "default"
                  }
                >
                  {dmg.status === "pending_customer"
                    ? "Ch·ªù kh√°ch h√†ng"
                    : dmg.status === "pending_manager"
                      ? "Ch·ªù qu·∫£n l√Ω"
                      : dmg.status === "approved"
                        ? "ƒê√£ duy·ªát"
                        : dmg.status === "rejected"
                          ? "ƒê√£ t·ª´ ch·ªëi"
                          : dmg.status}
                </Tag>
              </p>

              {/* Hi·ªÉn th·ªã feedback */}
              {(dmg.customerFeedback || dmg.managerFeedback) && (
                <div
                  style={{
                    marginTop: 10,
                    background: "#fafafa",
                    padding: "12px",
                    borderRadius: "8px",
                    border: "1px solid #eaeaea",
                  }}
                >
                  {/* Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa kh√°ch h√†ng */}
                  {dmg.customerFeedback && (
                    <p
                      style={{
                        color:
                          dmg.status === "rejected"
                            ? "#d4380d" // ƒë·ªè c·∫£nh b√°o n·∫øu kh√°ch t·ª´ ch·ªëi
                            : "#1677ff", // xanh n·∫øu kh√°ch duy·ªát
                        marginBottom: 6,
                      }}
                    >
                      üí¨ <b>Ph·∫£n h·ªìi kh√°ch h√†ng:</b>{" "}
                      {dmg.customerFeedback.includes("Approved")
                        ? "‚úÖ " + dmg.customerFeedback
                        : "‚ùå " + dmg.customerFeedback}
                    </p>
                  )}

                  {/* Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa qu·∫£n l√Ω */}
                  {dmg.managerFeedback && (
                    <p
                      style={{
                        color:
                          dmg.status === "rejected"
                            ? "#cf1322" // ƒë·ªè n·∫øu b·ªã t·ª´ ch·ªëi
                            : "#52c41a", // xanh l√° n·∫øu ƒë∆∞·ª£c duy·ªát
                        marginBottom: 0,
                      }}
                    >
                      üßë‚Äçüíº <b>Ph·∫£n h·ªìi qu·∫£n l√Ω:</b>{" "}
                      {dmg.managerFeedback.includes("Approved")
                        ? "‚úÖ " + dmg.managerFeedback
                        : "‚ùå " + dmg.managerFeedback}
                    </p>
                  )}
                </div>
              )}

            </Card>
          ))
        )}
      </Modal>

      {/* ‚úèÔ∏è Modal: Ch·ªânh s·ª≠a thi·ªát h·∫°i */}
      <Modal
        title="Ch·ªânh S·ª≠a Thi·ªát H·∫°i"
        open={isEditDamageVisible}
        onCancel={() => setIsEditDamageVisible(false)}
        onOk={() => damageForm.submit()}
      >
        <Form layout="vertical" form={damageForm} onFinish={handleEditDamage}>
          <Form.Item label="Nguy√™n Nh√¢n" name="cause" rules={[{ required: true }]}>
            <Input.TextArea rows={3} />
          </Form.Item>
          <Form.Item label="Chi Ph√≠ (‚Ç´)" name="cost" rules={[{ required: true }]}>
            <Input type="number" />
          </Form.Item>
          <Form.Item label="Link ·∫¢nh" name="imageUrl">
            <Input placeholder="URL h√¨nh ·∫£nh (t√πy ch·ªçn)" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default WorkProgressPage;
//fix end