import React, { useEffect, useState } from "react";
import ReactDOM from "react-dom";
import { workProgressApi } from "../service/workprogress";
import { assignmentApi } from "../service/assignment";
import "./style/ManagerWorkProgressPage.css";

// ===================== Modal Component =====================
const Modal = ({ show, onClose, children }) => {
  if (!show) return null;

  return ReactDOM.createPortal(
    <div
      className="modal-overlay-portal"
      onClick={(e) => {
        if (e.target.className === "modal-overlay-portal") {
          onClose();
        }
      }}
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: "rgba(0, 0, 0, 0.6)",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        zIndex: 999999,
      }}
    >
      {children}
    </div>,
    document.body
  );
};

// ===================== Main Component =====================
const ManagerWorkProgressPage = () => {
  const [contracts, setContracts] = useState([]);
  const [selectedContract, setSelectedContract] = useState(null);
  const [employees, setEmployees] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [taskDescription, setTaskDescription] = useState("");
  const [progressStatus, setProgressStatus] = useState("pending");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  // ========== L·∫•y danh s√°ch h·ª£p ƒë·ªìng ==========
  useEffect(() => {
    const fetchContracts = async () => {
      try {
        const res = await workProgressApi.getEligibleContracts();
        console.log("‚úÖ Eligible contracts:", res.data);
        setContracts(res.data || []);
      } catch (err) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch h·ª£p ƒë·ªìng:", err);
      }
    };
    fetchContracts();
  }, []);

  // ========== L·∫•y danh s√°ch nh√¢n vi√™n cho t·ª´ng h·ª£p ƒë·ªìng ==========
  const fetchEmployeesForContract = async (contractId) => {
    try {
      const res = await assignmentApi.getAssignmentsByContract(contractId);
      console.log("‚úÖ Assigned employees for contract", contractId, res.data);
      setEmployees(res.data || []);
      return res.data || [];
    } catch (err) {
      console.error("‚ùå L·ªói l·∫•y nh√¢n vi√™n:", err);
      setEmployees([]);
      return [];
    }
  };

  // ========== M·ªü modal t·∫°o Work Progress ==========
  const handleOpenCreateModal = async (contractId) => {
    setMessage("");
    setSelectedContract(contractId);
    setEmployees([]);
    setSelectedEmployee(null);
    setTaskDescription("");
    setProgressStatus("pending");

    const loadedEmployees = await fetchEmployeesForContract(contractId);
    if (!loadedEmployees || loadedEmployees.length === 0) {
      alert("‚ö†Ô∏è H·ª£p ƒë·ªìng n√†y ch∆∞a c√≥ nh√¢n vi√™n ƒë∆∞·ª£c g√°n!");
      return;
    }

    setShowModal(true);
  };

  // ========== ƒê√≥ng modal ==========
  const handleCloseModal = () => {
    setShowModal(false);
    setMessage("");
    setSelectedEmployee(null);
    setTaskDescription("");
    setProgressStatus("pending");
  };

  // ========== G·ª≠i request t·∫°o Work Progress ==========
  const handleCreateWorkProgress = async () => {
    if (!selectedEmployee) {
      setMessage("‚ö†Ô∏è Vui l√≤ng ch·ªçn nh√¢n vi√™n!");
      return;
    }
    if (!taskDescription.trim()) {
      setMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác!");
      return;
    }

    const payload = {
      contractId: selectedContract,
      employeeId: selectedEmployee, // ‚úÖ ch·ªâ g·ª≠i employeeId
      taskDescription: taskDescription.trim(),
      progressStatus,
    };

    console.log("üì§ Payload g·ª≠i ƒëi:", payload);

    setLoading(true);
    setMessage("");

    try {
      const response = await workProgressApi.createForEmployee(payload);
      console.log("‚úÖ Success:", response);
      setMessage("‚úÖ T·∫°o Work Progress th√†nh c√¥ng!");
      alert("‚úÖ T·∫°o Work Progress th√†nh c√¥ng!");
      setTimeout(() => handleCloseModal(), 1000);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o Work Progress:", err);
      const errorMsg =
        err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      setMessage("‚ùå T·∫°o Work Progress th·∫•t b·∫°i: " + errorMsg);
      alert("‚ùå T·∫°o Work Progress th·∫•t b·∫°i: " + errorMsg);
    } finally {
      setLoading(false);
    }
  };

  // ===================== Render =====================
  return (
    <div className="manager-work-progress-container">
      <h2>üìã Qu·∫£n l√Ω t·∫°o Work Progress</h2>

      {/* Debug */}
      <div
        style={{
          background: showModal ? "#ffeb3b" : "#e0e0e0",
          padding: "10px",
          marginBottom: "10px",
          borderRadius: "4px",
          fontSize: "12px",
        }}
      >
        <strong>Debug:</strong> showModal = {showModal ? "TRUE ‚úÖ" : "FALSE ‚ùå"} |{" "}
        employees = {employees.length} | selectedContract ={" "}
        {selectedContract || "none"}
      </div>

      {/* B·∫£ng h·ª£p ƒë·ªìng */}
      <table className="contract-table">
        <thead>
          <tr>
            <th>M√£ h·ª£p ƒë·ªìng</th>
            <th>Ng√†y b·∫Øt ƒë·∫ßu</th>
            <th>Ng√†y k·∫øt th√∫c</th>
            <th>T·ªïng ti·ªÅn</th>
            <th>ƒê·ªãa ƒëi·ªÉm (T·ª´ ‚Üí ƒê·∫øn)</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          {contracts.length > 0 ? (
            contracts.map((c) => (
              <tr key={c.contractId}>
                <td>#{c.contractId}</td>
                <td>{c.startDate || "‚Äî"}</td>
                <td>{c.endDate || "‚Äî"}</td>
                <td>
                  {c.totalAmount
                    ? `$${Number(c.totalAmount).toLocaleString()}`
                    : "‚Äî"}
                </td>
                <td>
                  {c.startLocation || "‚Äî"} ‚Üí {c.endLocation || "‚Äî"}
                </td>
                <td>{c.status || "‚Äî"}</td>
                <td>
                  <button
                    className="btn-view"
                    onClick={() => {
                      setSelectedContract(c.contractId);
                      fetchEmployeesForContract(c.contractId);
                    }}
                  >
                    Xem nh√¢n vi√™n
                  </button>{" "}
                  <button
                    className="btn-create"
                    onClick={() => handleOpenCreateModal(c.contractId)}
                  >
                    T·∫°o Work Progress
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="7" style={{ textAlign: "center", padding: "20px" }}>
                Kh√¥ng c√≥ h·ª£p ƒë·ªìng ƒë·ªß ƒëi·ªÅu ki·ªán.
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Danh s√°ch nh√¢n vi√™n */}
      {selectedContract && !showModal && employees.length > 0 && (
        <div className="employee-list">
          <h3>üë∑ Nh√¢n vi√™n ƒë∆∞·ª£c g√°n cho h·ª£p ƒë·ªìng #{selectedContract}</h3>
          <ul>
            {employees.map((e, i) => (
              <li key={i}>
                <strong>{e.username}</strong> ‚Äî <i>{e.position}</i>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Modal */}
      <Modal show={showModal} onClose={handleCloseModal}>
        <div
          className="modal-content-box"
          onClick={(e) => e.stopPropagation()}
          style={{
            backgroundColor: "white",
            padding: "30px",
            borderRadius: "12px",
            minWidth: "500px",
            maxWidth: "600px",
          }}
        >
          <h3>üß± T·∫°o Work Progress cho h·ª£p ƒë·ªìng #{selectedContract}</h3>

          {/* Ch·ªçn nh√¢n vi√™n */}
          <div style={{ marginBottom: "20px" }}>
            <label>Ch·ªçn nh√¢n vi√™n *</label>
            <select
              value={selectedEmployee ?? ""}
              onChange={(e) => setSelectedEmployee(Number(e.target.value))}
              disabled={loading}
              style={{
                width: "100%",
                padding: "10px",
                borderRadius: "6px",
                border: "1px solid #ddd",
              }}
            >
              <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
              {employees.map((emp) => (
                <option key={emp.employeeId} value={emp.employeeId}>
                  {emp.username} - {emp.position}
                </option>
              ))}
            </select>
          </div>

          {/* M√¥ t·∫£ c√¥ng vi·ªác */}
          <div style={{ marginBottom: "20px" }}>
            <label>M√¥ t·∫£ c√¥ng vi·ªác *</label>
            <textarea
              value={taskDescription}
              onChange={(e) => setTaskDescription(e.target.value)}
              rows="4"
              disabled={loading}
              style={{
                width: "100%",
                padding: "10px",
                borderRadius: "6px",
                border: "1px solid #ddd",
              }}
            />
          </div>

          {/* Tr·∫°ng th√°i */}
          <div style={{ marginBottom: "20px" }}>
            <label>Tr·∫°ng th√°i</label>
            <select
              value={progressStatus}
              onChange={(e) => setProgressStatus(e.target.value)}
              disabled={loading}
              style={{
                width: "100%",
                padding: "10px",
                borderRadius: "6px",
                border: "1px solid #ddd",
              }}
            >
              <option value="pending">ƒêang ch·ªù</option>
              <option value="in_progress">ƒêang th·ª±c hi·ªán</option>
              <option value="completed">Ho√†n th√†nh</option>
            </select>
          </div>

          {/* Th√¥ng b√°o */}
          {message && (
            <div
              style={{
                padding: "10px",
                borderRadius: "6px",
                marginBottom: "15px",
                backgroundColor: message.includes("‚úÖ") ? "#d4edda" : "#f8d7da",
                color: message.includes("‚úÖ") ? "#155724" : "#721c24",
                border: `1px solid ${
                  message.includes("‚úÖ") ? "#c3e6cb" : "#f5c6cb"
                }`,
              }}
            >
              {message}
            </div>
          )}

          {/* Buttons */}
          <div style={{ display: "flex", gap: "10px" }}>
            <button
              onClick={handleCreateWorkProgress}
              disabled={loading}
              style={{
                flex: 1,
                padding: "12px 20px",
                backgroundColor: "#4a90e2",
                color: "white",
                border: "none",
                borderRadius: "6px",
              }}
            >
              {loading ? "ƒêang t·∫°o..." : "T·∫°o"}
            </button>
            <button
              onClick={handleCloseModal}
              disabled={loading}
              style={{
                flex: 1,
                padding: "12px 20px",
                backgroundColor: "#6c757d",
                color: "white",
                border: "none",
                borderRadius: "6px",
              }}
            >
              H·ªßy
            </button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default ManagerWorkProgressPage;
